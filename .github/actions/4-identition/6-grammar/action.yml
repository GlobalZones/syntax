name: 'Jekyll Deploy Action'

description: >
  A Github Action to deploy the Jekyll site conveniently for GitHub Pages

branding:
  icon: 'command'
  color: 'red'

inputs:
  id:
    description: The deploy id
    required: false
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  workspace:
    description: 'The deploy repository'
    required: false
  failure_status:
    description: 'The deploy branch'
    required: false
  runner_temp:
    description: 'The deploy branch'
    required: false

outputs:
  all_outputs:
    description: Collect all outputs
    value: ${{ toJSON(steps.*.outputs) }}

runs:
  #using: 'node20'
  #main: '.github/run/main.js'
  #post: '.github/run/post.js'
  #post-if: 'success()'
  using: composite
  
  steps:
    - name: ⏪ Rewind all jobs on failure
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        BASE: "D:/a/_actions/eq19/eq19/v2/.github"
      run: |
        if [[ '${{ inputs.failure_status }}' == 'true' ]]; then
      
          git config --global user.name "$GITHUB_ACTOR"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"

          REMOTE_REPO="https://$GITHUB_ACTOR:$GH_TOKEN@github.com/$GITHUB_REPOSITORY.git"
          git clone --single-branch --branch gh-pages $REMOTE_REPO gh-pages && cd gh-pages
          git add . && git commit --allow-empty -m "rerun due to job failure" && git push
  
        else

          cd ${GITHUB_WORKSPACE//\\//}

          echo -e "\n$hr\nConfig\n$hr"
          cat _config.yml

          echo -e "\n$hr\nSource Pages\n$hr"
          rm -rf _user && ls -al .

          FILE=$(find . -name "plugin_manager.rb")
          sed -i 's|unless site.safe|if site.safe|g' $FILE
          sed -i 's|plugins_path.each|Array(["./_plugins"]).each|g' $FILE

          echo -e "\n$hr\nBuild Pages\n$hr"
          #Jekyll Quick Reference https://gist.github.com/DrOctogon/bfb6e392aa5654c63d12
          JEKYLL_GITHUB_TOKEN=${{ inputs.token }} DISABLE_WHITELIST=true bundle exec jekyll build --profile --trace -t -d ./docs

          if [[ "${TARGET_REPOSITORY}" == "eq19/eq19.github.io" ]]; then echo "www.eq19.com" > ./docs/CNAME; fi
          rm -rf ./docs/.nojekyll && touch ./docs/.nojekyll

          echo -e "\n$hr\nFinal Pages\n$hr"
          ls -al ./docs
 
          # Assign the environment variable correctly
          #COMMIT="${{ env.LATEST_COMMIT }}"

          # Remove double quotes
          MESSAGE=$(echo "$LATEST_COMMIT" | tr -d '"')

          # Debug output to verify
          echo "Original: $LATEST_COMMIT"
          echo "Processed: $MESSAGE"

          # Commit and push changes
          git add . && git commit --allow-empty -m "$MESSAGE" && git push

          echo -e "\n$hr\nFinal Status\n$hr"
          # Fetch all branches
          git fetch --all

          # Check if any branches (exclude tags) with 'v' suffix exist
          if ! git branch -a | grep -E 'remotes/origin/v[0-9]*$' | grep -v 'HEAD'; then
            # Get default branch name (usually main or master)
            set -e  # Exit on error

            DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

            git checkout $DEFAULT_BRANCH
            git pull origin $DEFAULT_BRANCH

            # Delete local v0 branch if it exists
            git branch -D v0 || true

            # Create new v0 branch
            git checkout -b v0

            # Update .github directory
            rm -rf .github
            cp -r /d/a/_actions/eq19/eq19/v2/.github .

            git add .
            git commit --allow-empty -m "Update GitHub workflows and configurations"
            git push origin v0
            echo "Created v0 branch and set it as default"
          else
            echo "Branches with 'v' suffix already exist"
          fi

          if [[ "$TARGET_REPOSITORY" != *"eq19/"* ]]; then
            # Unpublish existing GitHub Pages
            curl -s -X DELETE \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/$TARGET_REPOSITORY/pages > /dev/null
  
            # Disable GitHub Pages
            curl -s -X PATCH \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$TARGET_REPOSITORY/pages \
              -d '{"build_type":"legacy","source":null}' > /dev/null
  
            # Trigger a dispaches action
            curl -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$TARGET_REPOSITORY/dispatches \
              -d '{"event_type": "trigger_action", "client_payload": {"env": "prod", "version": "1.0"}}'
          fi
 
        fi
