name: 'Docker Deploy Action'

description: >
  ü™Ç  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'red'

inputs:
  id:
    description: The deploy id
    required: false
  hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  hub_password:
    description: Docker Hub authentication token
    required: true
  hub_token:
    description: Docker Hub authentication token
    required: true
  action_path:
    description: Path to the dockerfile from which to build the image
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    default: ${{ github.action_repository }}
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  initiate_pauli_sum:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false
  api_key:
    description: The key of api application
    required: true
  api_secret:
    description: The secret of api application
    required: true
  pypi_token:
    description: The pypi token
    required: true
  bot_token:
    description: The monitor token
    required: true
  logs_token:
    description: The warning token
    required: true
  chat_id:
    description: The telegram chat id
    required: true

outputs:
  artifact:
    description: Collect artifact outputs
    value: ${{ toJSON(steps.artifact.outputs) }}
  variables:
    description: Collect variables outputs
    value: ${{ toJSON(steps.variables.outputs) }}

runs:
  using: composite
  steps:
    - name: Remove Existing Connection
      shell: bash
      env:
        RUN: ${{ github.run_id }}
        USER: ${{ github.actor }}
        REPO: ${{ github.repository }}
        ACTOR: ${{ github.triggering_actor }}
        OWNER: ${{ github.repository_owner }}
      run: |
        gh variable set RERUN_RUNNER --body "false"

        HEADER="Accept: application/vnd.github+json"
        RESPONSE=$(gh api -H "${HEADER}" repos/${{ github.repository }}/actions/runners)
        TOTAL_COUNT=$(gh api -H "${HEADER}" /repos/${{ github.repository }}/actions/runners --jq '.total_count')
        STATUS=$(echo "$RESPONSE" | jq -r --arg NAME "${{ env.RUNNER_TITLE }}" '.runners[] | select(.name == $NAME).status')

        if [[ "$TOTAL_COUNT" -eq 0 ]]; then
          export "RUNNER_COUNT=$TOTAL_COUNT"
          gh variable set RERUN_RUNNER --body "true"
        elif [[ "$STATUS" == "offline" ]]; then
          export "RUNNER_STATUS=$STATUS"
          gh variable set RERUN_RUNNER --body "true"
          RUNNER_ID=$(gh api -H "${HEADER}" /repos/${{ github.repository }}/actions/runners --jq '.runners.[].id')
          gh api --method DELETE -H "${HEADER}" /repos/${{ github.repository }}/actions/runners/${RUNNER_ID}
        fi

        bash /home/runner/work/_actions/eq19/eq19/v2/.github/entrypoint/init.sh ${{ inputs.action_path }}
        mv -f /home/runner/work/_actions/eq19/eq19/v2/.github/entrypoint/dockerfile/* ${{ inputs.action_path }}/

    - name: View context attributes
      uses: actions/github-script@v7
      with:
        script: console.log(context)

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12
        allow-prereleases: true

    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip

    - name: üíé Set ID Token
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'id_token'
        create_credentials_file: false
        credentials_json: ${{ inputs.credentials }}
        id_token_audience: 'https://us-central1-feedmapping.cloudfunctions.net/function'

    - name: Install dependencies
      shell: bash
      env:
        ACCESS_API: ${{ inputs.api_key }}
        ACCESS_KEY: ${{ inputs.api_secret }}
        ACCESS_TOKEN: ${{ inputs.token }}
        MESSAGE_API: ${{ inputs.chat_id }}
        MONITOR_TOKEN: ${{ inputs.bot_token }}
        WARNING_TOKEN: ${{ inputs.logs_token }}
        PYPI_TOKEN: ${{ inputs.pypi_token }}        
        DOCKER_HUB_TOKEN: ${{ inputs.hub_token }}
        DOCKER_HUB_PASSWORD: ${{ inputs.hub_password }}
        GCP_CREDENTIALS: ${{ inputs.credentials }}
      run: |
        python -m pip -q install --upgrade pip
        python -m pip -qqq install tensorflow-cpu
        #python -m pip -qqq install -r ${{ inputs.action_path }}/dataFile/requirements.txt

        ##Ref: https://iree.dev/guides/ml-frameworks/tensorflow/
        #pip uninstall -y iree-base-compiler iree-base-runtime iree-compiler iree-tools-tf
        python -m pip -q install --pre iree-base-compiler iree-base-runtime iree-tools-tf -f https://iree.dev/pip-release-links.html
  
        ##python -m pip -q install -e ./.github/entrypoint/artifact/python
        ##iree-compile --iree-llvmcpu-list-targets && iree-run-module --list_drivers

        ##Ref: https://github.com/iree-org/iree-experimental
        ##python ${{ inputs.action_path }}/pythonCode/testIREE.py
        
        #sudo apt-get update > /dev/null
        #sudo apt-get install llvm-17 llvm-17-dev clang-17 mlir-17-tools > /dev/null
        #export IREE_LLVM_ENABLE_BACKTRACE=1
        #export LLVM_SYMBOLIZER_PATH=$(which llvm-symbolizer)

        pip freeze | grep iree
        pip cache purge && find . -type d -name "__pycache__" -exec rm -rf {} +
        python user_data/ft_client/test_client/app.py orgs.json ${{ inputs.action_path }}

        ##Ref: https://github.com/eq19/maps/tree/v3/pythonCode
        ##python ${{ github.workspace }}/.github/entrypoint/artifact/python/gellmann.py
        ##cd ${{ inputs.action_path }}/pythonCode && python npreader.py -h && python map.py -h

        # Get all secrets from source repository
        secrets=$(curl -s -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/actions/secrets" | jq -r '.secrets[].name')
        for secret in $secrets; do gh secret set $secret --repo ${{ env.TARGET_REPOSITORY }} --body "${!secret}"; done

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.hub_username }}
        password: ${{ inputs.hub_token }}

    - name: üöÄ Initiate Lexer
      uses: devcontainers/ci@v0.3
      with:
        skipContainerUserIdUpdate: true
        imageName: ${{ inputs.image_name }}
        imageTag: target-${{ github.run_number }}
        configFile: ${{ inputs.action_path }}/.devcontainer.json
        push: ${{ env.RERUN_RUNNER == 'true' && 'always' || 'never' }}
        runCmd: bash user_data/ft_client/test_client/maps.sh            
        env: |
          ID=${{ env.ID }}
          GH_TOKEN=${{ env.GH_TOKEN }}
          REMOTE_REPO=${{ env.REMOTE_REPO }}
          BEARER=${{ steps.auth.outputs.id_token }}
          GITHUB_REPOSITORY=${{ github.repository }}
          TARGET_REPOSITORY=${{ env.TARGET_REPOSITORY }}
          WORKSPACE=/workspaces/${{ github.event.repository.name }}
          ARTIFACT=user_data/ft_client/test_client/results/orgs.json

    - name: üóëÔ∏è Delete Docker Tags AND Images
      id: delete_images
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
        HUB_USERNAME: "${{ inputs.hub_username }}"
        HUB_PASSWORD: "${{ inputs.hub_password }}"
        MAX_DELETIONS: 15
      run: |
        ./.github/entrypoint/remote.sh
